---
title: "DetectSyntaxError Decision Problem"
description: "Explore the detection of syntactically invalid programs"
date: "2025-09-08"
date-format: long
author: Grant Anderson, Cullen Doyle, Ritesh Ojha, Miguel Orti Vila
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

# Introduction

::: {.fragment style="margin-top: -0.5em; font-size: 0.8em;"} 
  - Goal: Build a Syntax Error Detection
  - 
:::

## What is a Syntax Error?
- Occurs when code violates **Python grammar rules**  
- Examples:  
```python
for i in range(5)  # Missing colon

def hello():
print("hi")  #  No Indentation

for i is range(5):  # should be `in` instead of `is`
```
- Syntax errors are detected before code runs

- Different from runtime errors, which happen during execution

## Runtime Errors

- Syntax is correct, but execution fails

Example:
```python
for i in range(5):
    print(a)  # 'a' undefined which is a runtime error
```
- Python can start executing, but fails at the problem line



## Building a Syntax Error Detector


```{pyodide}
#| autorun: false
#| max-lines: 15
import ast

def detect_syntax_error(code: str) -> bool:
    """Detect if code has sy ntax errors"""
    try:
        ast.parse(code)   # Syntax check
        return False
    except SyntaxError as e:
        print(f"Syntax Error: {e}")
        return True

def run_code_safely(code: str):
    """Run code safely and catch runtime errors"""
    try:
        exec(code, {})  # Execute in empty namespace
    except Exception as e:
        print(f"Runtime Error: {e}")

# Demo 1: Correct syntax, but runtime error
print("=== Demo 1: Correct syntax, but runtime error ===")
code1 = "for i in range(5):\n    print(a)"
if detect_syntax_error(code1):
    print("Demo 1: Syntax Error detected")
else:
    print("Demo 1: No syntax error")
    run_code_safely(code1)

print("\n=== Demo 2: Incorrect code (missing colon) ===")
# Demo 2: Incorrect code (missing colon)
code2 = "for i in range(5)\n    print(i)"
if detect_syntax_error(code2):
    print("Demo 2: Syntax Error detected")
else:
    print("Demo 2: No syntax error")
    run_code_safely(code2)

print("\n=== Demo 3: Bad indent ===")
# Demo 3: Bad indent
code3 = "def hello():\nprint('hi')"
if detect_syntax_error(code3):
    print("Demo 3: Syntax Error detected")
else:
    print("Demo 3: No syntax error")
    run_code_safely(code3)
```
:::

## How it works?
- Python’s ast module converts code into an Abstract Syntax Tree (AST).

- ast.parse(code) attempts to parse the code according to Python’s grammar rules.

- If the code violates Python syntax like a missing colon, indentation, or wrong keyword, Python gives a SyntaxError.

- This is a SISO(Single Input Single Output) python program where it takes one piece of Python code as input (a string) and For each input, the program produces one clear output either Syntax Error detected Or No syntax error (and optionally prints runtime errors if any occur)

:::

## Is this problem feasible in the General Case?

