---
title: "DetectEquivalentPrograms Decision Problem"
description: "Explore the detection of equivalent programs"
date: "2025-09-08"
date-format: long
author: Ainslee Plesko, Coltin Colucci, Alexander Goddard, and Preston Smith
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

## Introduction

::: {.fragment}
x
:::

## What does 'equivalence' mean?

::: {.fragment}
x
:::

# Theory of computation

::: {.fragment style="margin-top: -0.5em; font-size: 0.8em;"} 

- {{< iconify fa6-solid lightbulb >}} **What is theory of computation?**
    - Understanding what can be computed
    - Analyzing computational complexity
    - Proving limits of computation
    - "Proofgrammers" combine *proofs* and *programming*

:::

## Example Solution

::: {.incremental style="margin-top: -0.15em; font-size: 0.95em;"}
x
:::

## Example Solution 2 (can delete if not needed)

::: {.incremental style="margin-top: -0.15em; font-size: 0.95em;"}
x
:::

## Python Implementation

```{pyodide}
x
```

## Tractable vs Intractable vs Uncomputable

::: {.fragment}
x
:::

## Feasibility in the General Case

::: {.fragment}
x
:::

## Conclusion

::: {.fragment}
x
:::
