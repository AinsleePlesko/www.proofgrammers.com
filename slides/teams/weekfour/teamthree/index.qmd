---
title: "`definedOnString` is Uncomputable"
description: "Explore the limits of `definedOnString`"
date: "2025-09-15"
date-format: long
author: Ainslee Plesko, Javier Bejarano Jimenez, and Abishek Dhakal
execute:
  echo: true
format:
  live-revealjs:
    completion: true
    theme: default
    css: ../../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Proofgrammers"
---

# Introduction

::: {.incremental style="margin-top: -0.15em; font-size: 0.85em;"}
-   x
:::

## What is `definedOnString`?

::: {.incremental style="margin-top: -0.15em; font-size: 0.85em;"}
-   x
:::

## `definedOnString`: Case 1

```{pyodide}
# "rf" function: read a program file as a string
def rf(filename: str) -> str:
    if filename == "definedOnString.py":
        return """\
# full contents of definedOnString.py go here
def DefinedOnString(program_code: str, inString: str) -> bool:
    return True

def Paradox():
    my_source = rf("definedOnString.py")
    if DefinedOnString(my_source, my_source):
        print("Checker says: halts → looping forever...")
        while True:
            pass
    else:
        print("Checker says: does not halt → halting now.")
        return "halted"

Paradox()
"""
    else:
        return ""


# Case 1
def DefinedOnString(program_code : str, inString : str) -> bool:
    """When given a program and an input string, returns True if the program halts on that input."""
    return True # Assume it halts for demonstration

def Paradox():
    """A paradoxical function that uses DefinedOnString to create a contradiction."""
    my_source = rf("definedOnString.py") # read this file as a string
    if DefinedOnString(my_source, my_source):
        print("Checker says: halts → looping forever...")
        while True:
            pass
    else:
        print("Checker says: does not halt → halting now.")
        return "halted"

Paradox()
```

## `definedOnString`: Case 2

```{pyodide}
# "rf" function: read a program file as a string
def rf(filename: str) -> str:
    if filename == "definedOnString.py":
        return """\
# full contents of definedOnString.py go here
def DefinedOnString(program_code: str, inString: str) -> bool:
    return False

def Paradox():
    my_source = rf("definedOnString.py")
    if DefinedOnString(my_source, my_source):
        print("Checker says: halts → looping forever...")
        while True:
            pass
    else:
        print("Checker says: does not halt → halting now.")
        return "halted"

Paradox()
"""
    else:
        return ""


# Case 2
def DefinedOnString(program_code : str, inString : str) -> bool:
    """When given a program and an input string, returns True if the program halts on that input."""
    return False # Assume it does not halt for demonstration

def Paradox():
    """A paradoxical function that uses DefinedOnString to create a contradiction."""
    my_source = rf("definedOnString.py") # read this file as a string
    if DefinedOnString(my_source, my_source):
        print("Checker says: halts → looping forever...")
        while True:
            pass
    else:
        print("Checker says: does not halt → halting now.")
        return "halted"
    
Paradox()
```

## Limitations

::: {.incremental style="margin-top: -0.15em; font-size: 0.85em;"}
-   x
:::

## Why is it uncomputable?

::: {.incremental style="margin-top: -0.15em; font-size: 0.85em;"}
-   x
:::

## Conclusion

::: {.incremental style="margin-top: -0.15em; font-size: 0.85em;"}
-   x
:::